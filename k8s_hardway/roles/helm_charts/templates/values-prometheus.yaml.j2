global:
  imageRegistry: ""
  imagePullSecrets: []
  storageClass: "{{glusterfs_sc}}"
  labels: {}
nameOverride: ""
fullnameOverride: ""
extraDeploy: []
operator:
  enabled: true
  image:
    registry: docker.io
    repository: bitnami/prometheus-operator
    tag: 0.55.1-debian-10-r22
    pullPolicy: IfNotPresent
    pullSecrets: []
  extraArgs: []
  hostAliases: []
  serviceAccount:
    create: true
    name: ""
  schedulerName: ""
  podSecurityContext:
    enabled: true
    runAsUser: 1001
    fsGroup: 1001
  containerSecurityContext:
    enabled: true
    capabilities:
      drop:
      - ALL
    runAsNonRoot: true
    allowPrivilegeEscalation: false
    readOnlyRootFilesystem: false
  service:
    type: ClusterIP
    port: 8080
    clusterIP: ""
    nodePort: ""
    loadBalancerIP: ""
    loadBalancerSourceRanges: []
    externalTrafficPolicy: Cluster
    healthCheckNodePort: ""
    annotations: {}
  serviceMonitor:
    enabled: true
    interval: ""
    metricRelabelings: []
    relabelings: []
  resources: {}
  podAffinityPreset: ""
  podAntiAffinityPreset: soft
  nodeAffinityPreset:
    type: ""
    key: ""
    values: []
  affinity: {}
  nodeSelector: {}
  tolerations: []
  priorityClassName: ""
  livenessProbe:
    enabled: true
    path: /metrics
    initialDelaySeconds: 120
    periodSeconds: 10
    timeoutSeconds: 5
    failureThreshold: 6
    successThreshold: 1
  readinessProbe:
    enabled: true
    path: /metrics
    initialDelaySeconds: 30
    periodSeconds: 10
    timeoutSeconds: 5
    failureThreshold: 6
    successThreshold: 1
  logLevel: info
  logFormat: logfmt
  configReloaderResources: {}
  kubeletService:
    enabled: true
    namespace: kube-system
  prometheusConfigReloader:
    image: {}
    containerSecurityContext:
      enabled: true
      readOnlyRootFilesystem: false
      allowPrivilegeEscalation: false
      runAsNonRoot: true
      capabilities:
        drop:
          - ALL
    livenessProbe:
      enabled: true
      initialDelaySeconds: 10
      periodSeconds: 10
      timeoutSeconds: 5
      failureThreshold: 6
      successThreshold: 1
    readinessProbe:
      enabled: true
      initialDelaySeconds: 15
      periodSeconds: 20
      timeoutSeconds: 5
      failureThreshold: 6
      successThreshold: 1
prometheus:
  enabled: true
  image:
    registry: docker.io
    repository: bitnami/prometheus
    tag: 2.34.0-debian-10-r13
    pullSecrets: []
  serviceAccount:
    create: true
    name: ""
    annotations: {}
  podSecurityContext:
    enabled: true
    runAsUser: 1001
    fsGroup: 1001
  containerSecurityContext:
    enabled: true
    readOnlyRootFilesystem: false
    allowPrivilegeEscalation: false
    runAsNonRoot: true
    capabilities:
      drop:
        - ALL
  podDisruptionBudget:
    enabled: false
    minAvailable: 1
    maxUnavailable: ""
  service:
    type: ClusterIP
    port: 9090
    clusterIP: ""
    nodePort: ""
    loadBalancerIP: ""
    loadBalancerSourceRanges: []
    externalTrafficPolicy: Cluster
    healthCheckNodePort: ""
    stickySessions: ""
    annotations: {}
  serviceMonitor:
    enabled: true
    interval: ""
    metricRelabelings: []
    relabelings: []
  ingress:
    enabled: false
    pathType: ImplementationSpecific
    apiVersion: ""
    hostname: prometheus.local
    path: /
    annotations: {}
    ingressClassName: ""
    tls: false
    extraHosts: []
    extraPaths: []
    extraTls: []
    secrets: []
  externalUrl: ""
  resources: {}
  podAffinityPreset: ""
  podAntiAffinityPreset: soft
  nodeAffinityPreset:
    type: ""
    key: ""
    values: []
  affinity: {}
  nodeSelector: {}
  tolerations: []
  scrapeInterval: ""
  evaluationInterval: ""
  listenLocal: false
  livenessProbe:
    enabled: true
    path: /-/healthy
    initialDelaySeconds: 0
    failureThreshold: 10
    periodSeconds: 10
    successThreshold: 1
    timeoutSeconds: 3
  readinessProbe:
    enabled: true
    path: /-/ready
    initialDelaySeconds: 0
    failureThreshold: 10
    periodSeconds: 10
    successThreshold: 1
    timeoutSeconds: 3
  startupProbe:
    enabled: true
    path: /-/ready
    initialDelaySeconds: 0
    failureThreshold: 60
    periodSeconds: 15
    successThreshold: 1
    timeoutSeconds: 3
  enableAdminAPI: false
  enableFeatures: []
  alertingEndpoints: []
  externalLabels: {}
  replicaExternalLabelName: ""
  replicaExternalLabelNameClear: false
  routePrefix: /
  prometheusExternalLabelName: ""
  prometheusExternalLabelNameClear: false
  secrets: []
  configMaps: []
  querySpec: {}
  ruleNamespaceSelector: {}
  ruleSelector: {}
  serviceMonitorSelector: {}
  matchLabels: {}
  serviceMonitorNamespaceSelector: {}
  podMonitorSelector: {}
  podMonitorNamespaceSelector: {}
  probeSelector: {}
  probeNamespaceSelector: {}
  retention: 10d
  retentionSize: ""
  disableCompaction: false
  walCompression: false
  paused: false
  replicaCount: 1
  logLevel: info
  logFormat: logfmt
  podMetadata:
    labels: {}
    annotations: {}
  remoteRead: []
  remoteWrite: []
  storageSpec: {}
  persistence:
    enabled: false
    storageClass: ""
    accessModes:
      - ReadWriteOnce
    size: 8Gi
  priorityClassName: ""
  containers: []
  volumes: []
  volumeMounts: []
  additionalPrometheusRules: []
  additionalScrapeConfigs:
    enabled: false
    type: external
    external:
      name: ""
      key: ""
    internal:
      jobList: []
  additionalScrapeConfigsExternal:
    enabled: false
    name: ""
    key: ""
  additionalAlertRelabelConfigsExternal:
    enabled: false
    name: ""
    key: ""
  thanos:
    create: false
    image:
      registry: docker.io
      repository: bitnami/thanos
      tag: 0.25.2-scratch-r3
      pullPolicy: IfNotPresent
      pullSecrets: []
    containerSecurityContext:
      enabled: true
      readOnlyRootFilesystem: false
      allowPrivilegeEscalation: false
      runAsNonRoot: true
      capabilities:
        drop:
          - ALL
    prometheusUrl: ""
    extraArgs: []
    objectStorageConfig: {}
    extraVolumeMounts: []
    resources:
      limits: {}
      requests: {}
    livenessProbe:
      enabled: true
      path: /-/healthy
      initialDelaySeconds: 0
      periodSeconds: 5
      timeoutSeconds: 3
      failureThreshold: 120
      successThreshold: 1
    readinessProbe:
      enabled: true
      path: /-/ready
      initialDelaySeconds: 0
      periodSeconds: 5
      timeoutSeconds: 3
      failureThreshold: 120
      successThreshold: 1
    service:
      type: ClusterIP
      port: 10901
      clusterIP: None
      nodePort: ""
      loadBalancerIP: ""
      loadBalancerSourceRanges: []
      annotations: {}
      extraPorts: []
    ingress:
      enabled: false
      annotations: {}
      ingressClassName: ""
      hosts:
        - name: thanos.prometheus.local
          path: /
      tls: {}
  portName: web
alertmanager:
  enabled: true
  image:
    registry: docker.io
    repository: bitnami/alertmanager
    tag: 0.24.0-debian-10-r24
    pullSecrets: []
  serviceAccount:
    create: true
    name: ""
  podSecurityContext:
    enabled: true
    runAsUser: 1001
    fsGroup: 1001
  containerSecurityContext:
    enabled: true
    readOnlyRootFilesystem: false
    allowPrivilegeEscalation: false
    runAsNonRoot: true
    capabilities:
      drop:
        - ALL
  podDisruptionBudget:
    enabled: false
    minAvailable: 1
    maxUnavailable: ""
  service:
    type: ClusterIP
    port: 9093
    clusterIP: ""
    nodePort: ""
    loadBalancerIP: ""
    loadBalancerSourceRanges: []
    externalTrafficPolicy: Cluster
    healthCheckNodePort: ""
    stickySessions: ""
    annotations: {}
  serviceMonitor:
    enabled: true
    interval: ""
    metricRelabelings: []
    relabelings: []
  ingress:
    enabled: false
    pathType: ImplementationSpecific
    apiVersion: ""
    hostname: alertmanager.local
    path: /
    annotations: {}
    ingressClassName: ""
    tls: false
    extraHosts: []
    extraPaths: []
    extraTls: []
    secrets: []
  externalUrl: ""
  resources: {}
  podAffinityPreset: ""
  podAntiAffinityPreset: soft
  nodeAffinityPreset:
    type: ""
    key: ""
    values: []
  affinity: {}
  nodeSelector: {}
  tolerations: []
  config:
    global:
      resolve_timeout: 5m
    route:
      group_by: ['job']
      group_wait: 30s
      group_interval: 5m
      repeat_interval: 12h
      receiver: 'null'
      routes:
        - match:
            alertname: Watchdog
          receiver: 'null'
    receivers:
      - name: 'null'
  externalConfig: false
  replicaCount: 1
  livenessProbe:
    enabled: true
    path: /-/healthy
    initialDelaySeconds: 0
    periodSeconds: 5
    timeoutSeconds: 3
    failureThreshold: 120
    successThreshold: 1
  readinessProbe:
    enabled: true
    path: /-/ready
    initialDelaySeconds: 0
    periodSeconds: 5
    timeoutSeconds: 3
    failureThreshold: 120
    successThreshold: 1
  logLevel: info
  logFormat: logfmt
  podMetadata:
    labels: {}
    annotations: {}
  secrets: []
  configMaps: []
  retention: 120h
  storageSpec: {}
  persistence:
    enabled: false
    storageClass: ""
    accessModes:
      - ReadWriteOnce
    size: 8Gi
  paused: false
  listenLocal: false
  containers: []
  volumes: []
  volumeMounts: []
  priorityClassName: ""
  additionalPeers: []
  routePrefix: /
  portName: web
  configNamespaceSelector: {}
  configSelector: {}
  configuration: {}
exporters:
  node-exporter:
    enabled: true
  kube-state-metrics:
    enabled: true
node-exporter:
  service:
    labels:
      jobLabel: node-exporter
  serviceMonitor:
    enabled: true
    jobLabel: jobLabel
  extraArgs:
    collector.filesystem.ignored-mount-points: "^/(dev|proc|sys|var/lib/docker/.+)($|/)"
    collector.filesystem.ignored-fs-types: "^(autofs|binfmt_misc|cgroup|configfs|debugfs|devpts|devtmpfs|fusectl|hugetlbfs|mqueue|overlay|proc|procfs|pstore|rpc_pipefs|securityfs|sysfs|tracefs)$"
kube-state-metrics:
  serviceMonitor:
    enabled: true
    honorLabels: true
kubelet:
  enabled: true
  namespace: kube-system
  serviceMonitor:
    https: true
    interval: ""
    metricRelabelings: []
    relabelings: []
    cAdvisorMetricRelabelings: []
    cAdvisorRelabelings: []
blackboxExporter:
  enabled: true
  image:
    registry: docker.io
    repository: bitnami/blackbox-exporter
    tag: 0.20.0-debian-10-r33
    pullPolicy: IfNotPresent
    pullSecrets: []
  extraEnvVars: []
  extraEnvVarsCM: ""
  extraEnvVarsSecret: ""
  command: []
  args: []
  replicaCount: 1
  livenessProbe:
    enabled: true
    failureThreshold: 3
    initialDelaySeconds: 30
    periodSeconds: 10
    successThreshold: 1
    timeoutSeconds: 1
  readinessProbe:
    enabled: true
    failureThreshold: 3
    initialDelaySeconds: 60
    periodSeconds: 10
    successThreshold: 1
    timeoutSeconds: 1
  startupProbe:
    enabled: false
    initialDelaySeconds: 30
    periodSeconds: 10
    timeoutSeconds: 1
    failureThreshold: 15
    successThreshold: 1
  customLivenessProbe: {}
  customReadinessProbe: {}
  customStartupProbe: {}
  configuration:  |
    "modules":
      "http_2xx":
        "http":
          "preferred_ip_protocol": "ip4"
        "prober": "http"
      "http_post_2xx":
        "http":
          "method": "POST"
          "preferred_ip_protocol": "ip4"
        "prober": "http"
      "irc_banner":
        "prober": "tcp"
        "tcp":
          "preferred_ip_protocol": "ip4"
          "query_response":
          - "send": "NICK prober"
          - "send": "USER prober prober prober :prober"
          - "expect": "PING :([^ ]+)"
            "send": "PONG ${1}"
          - "expect": "^:[^ ]+ 001"
      "pop3s_banner":
        "prober": "tcp"
        "tcp":
          "preferred_ip_protocol": "ip4"
          "query_response":
          - "expect": "^+OK"
          "tls": true
          "tls_config":
            "insecure_skip_verify": false
      "ssh_banner":
        "prober": "tcp"
        "tcp":
          "preferred_ip_protocol": "ip4"
          "query_response":
          - "expect": "^SSH-2.0-"
      "tcp_connect":
        "prober": "tcp"
        "tcp":
          "preferred_ip_protocol": "ip4"
  existingConfigMap: ""
  containerPorts:
    http: 19115
  serviceAccount:
    create: true
    name: ""
    automountServiceAccountToken: true
    annotations: {}
  resources:
    limits: {}
    requests: {}
  podSecurityContext:
    enabled: true
    fsGroup: 1001
  containerSecurityContext:
    enabled: true
    runAsUser: 1001
    runAsNonRoot: true
  lifecycleHooks: {}
  hostAliases: []
  podLabels: {}
  podAnnotations: {}
  podAffinityPreset: ""
  podAntiAffinityPreset: soft
  nodeAffinityPreset:
    type: ""
    key: ""
    values: []
  affinity: {}
  nodeSelector: {}
  tolerations: []
  topologySpreadConstraints: {}
  priorityClassName: ""
  schedulerName: ""
  updateStrategy:
    type: RollingUpdate
  extraVolumes: []
  extraVolumeMounts: []
  sidecars: []
  initContainers: []
  service:
    type: ClusterIP
    ports:
      http: 19115
    nodePorts:
      http: ""
    sessionAffinity: None
    clusterIP: ""
    loadBalancerIP: ""
    loadBalancerSourceRanges: []
    externalTrafficPolicy: Cluster
    annotations: {}
    extraPorts: []
kubeApiServer:
  enabled: true
  serviceMonitor:
    interval: ""
    metricRelabelings: []
    relabelings: []
kubeControllerManager:
  enabled: true
  endpoints: []
  namespace: kube-system
  service:
    enabled: true
    port: 10252
    targetPort: 10252
    selector: {}
  serviceMonitor:
    interval: ""
    https: false
    insecureSkipVerify: ""
    serverName: ""
    metricRelabelings: []
    relabelings: []
kubeScheduler:
  enabled: true
  endpoints: []
  namespace: kube-system
  service:
    enabled: true
    port: 10251
    targetPort: 10251
    selector: {}
  serviceMonitor:
    interval: ""
    https: false
    insecureSkipVerify: ""
    serverName: ""
    metricRelabelings: []
    relabelings: []
coreDns:
  enabled: true
  namespace: kube-system
  service:
    enabled: true
    port: 9153
    targetPort: 9153
    selector: {}
  serviceMonitor:
    interval: ""
    metricRelabelings: []
    relabelings: []
kubeProxy:
  enabled: true
  endpoints: []
  namespace: kube-system
  service:
    enabled: true
    port: 10249
    targetPort: 10249
    selector: {}
  serviceMonitor:
    https: false
    interval: ""
    metricRelabelings: []
    relabelings: []
rbac:
  create: true
  apiVersion: v1beta1
  pspEnabled: true
