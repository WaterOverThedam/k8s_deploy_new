#处理sudo丢失环境变量 
export PATH=$PATH:/usr/local/bin

#生成根证书和私钥------------------------------------------------  
echo 'root pem...'
cfssl gencert -initca ca-csr.json | cfssljson -bare ca

#生成admin客户端证书和私钥
echo 'admin pem...'
cfssl gencert \
  -ca=ca.pem \
  -ca-key=ca-key.pem \
  -config=ca-config.json \
  -profile=kubernetes \
  admin-csr.json | cfssljson -bare admin  
  
#生成kubelet客户端证书和私钥--------------------------------------  
echo 'kubelet pem...'
WORKERS=({{groups.worker|join(" ")}})
WORKER_IPS=({{ groups.worker | map('extract', hostvars, ['ip']) | join(' ') }})

##生成所有worker节点的证书配置
{% raw %}
for ((i=0;i<${#WORKERS[@]};i++)); do
cat > ${WORKERS[$i]}-csr.json <<EOF
{
  "CN": "system:node:${WORKERS[$i]}",
  "key": {
    "algo": "rsa",
    "size": 2048
  },
  "names": [
    {
      "C": "CN",
      "L": "Beijing",
      "O": "system:nodes",
      "OU": "seven",
      "ST": "Beijing"
    }
  ]
}
EOF
cfssl gencert \
  -ca=ca.pem \
  -ca-key=ca-key.pem \
  -config=ca-config.json \
  -hostname=${WORKERS[$i]},${WORKER_IPS[$i]} \
  -profile=kubernetes \
  ${WORKERS[$i]}-csr.json | cfssljson -bare ${WORKERS[$i]}
done  
{% endraw %}

#生成kube-controller-manager客户端证书----------------------------
echo 'kube-controller-manger pem...'
cfssl gencert \
  -ca=ca.pem \
  -ca-key=ca-key.pem \
  -config=ca-config.json \
  -profile=kubernetes \
  kube-controller-manager-csr.json | cfssljson -bare kube-controller-manager
  
#生成kube-proxy客户端证书-----------------------------------------  
echo 'kube-proxy pem...'
cfssl gencert \
  -ca=ca.pem \
  -ca-key=ca-key.pem \
  -config=ca-config.json \
  -profile=kubernetes \
  kube-proxy-csr.json | cfssljson -bare kube-proxy  
  
  
#生成kube-scheduler客户端证书------------------------------------
echo 'kube-scheduler pem...'
cfssl gencert \
  -ca=ca.pem \
  -ca-key=ca-key.pem \
  -config=ca-config.json \
  -profile=kubernetes \
  kube-scheduler-csr.json | cfssljson -bare kube-scheduler  
  
  
#Service Account证书---------------------------------------------
echo 'service account pem...'
cfssl gencert \
  -ca=ca.pem \
  -ca-key=ca-key.pem \
  -config=ca-config.json \
  -profile=kubernetes \
  service-account-csr.json | cfssljson -bare service-account

#proxy-client证书------------------------------------------------
echo 'proxy-client pem...'
cfssl gencert \
  -ca=ca.pem \
  -ca-key=ca-key.pem \
  -config=ca-config.json \
  -profile=kubernetes \
  proxy-client-csr.json | cfssljson -bare proxy-client

#生成kube-apiserver服务端证书-------------------------------------
echo 'kube-apiserver pem...'
##apiserver的service ip地址（一般是svc网段的第一个ip）
KUBERNETES_SVC_IP={{service_cluster_ip_range}}.1
##所有的master内网ip，逗号分隔（云环境可以加上master公网ip以便支持公网ip访问）
MASTER_IPS={{ (groups.master+groups.etcd) | unique |list | map('extract', hostvars, ['ip']) | join(',') }}

{% raw %}
cfssl gencert \
  -ca=ca.pem \
  -ca-key=ca-key.pem \
  -config=ca-config.json \
  -hostname=${KUBERNETES_SVC_IP},${MASTER_IPS},127.0.0.1,kubernetes,kubernetes.default,kubernetes.default.svc,kubernetes.default.svc.cluster,kubernetes.svc.cluster.local \
  -profile=kubernetes \
  kubernetes-csr.json | cfssljson -bare kubernetes  
  
  
#分发worker节点需要的证书和私钥
for instance in ${WORKERS[@]}; do
  echo "to $instance"
  scp -o StrictHostKeyChecking=no ca.pem ${instance}-key.pem ${instance}.pem root@${instance}:~/
done

#分发master节点需要的证书和私钥
##注意：由于下面分发的证书即包含了etcd的证书也包含了k8s主节点的证书。 所以 MASTER_IPS 中必须包含所有 master 节点以及 etcd 节点。如果没有包含所有etcd节点的证书，需要重新定义，逗号分隔
OIFS=$IFS
IFS=','
for instance in ${MASTER_IPS}; do
  echo "to $instance"
  scp -o StrictHostKeyChecking=no ca.pem ca-key.pem kubernetes-key.pem kubernetes.pem \
    service-account-key.pem service-account.pem proxy-client.pem proxy-client-key.pem root@${instance}:~/
done
IFS=$OIFS  
{% endraw %}
